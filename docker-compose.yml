services:
  # MSSQL
  mssql:
    image: mcr.microsoft.com/azure-sql-edge:latest
    container_name: mssql
    ports:
      - "1433:1433"
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "D3v3l0pm3nt!"
      MSSQL_PID: "Developer"
    volumes:
      - mssql-data:/var/opt/mssql
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "echo 'SELECT 1' | /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P $${MSSQL_SA_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: "D3v3l0pm3nt!"
      TZ: Europe/Istanbul
    volumes:
      - mongo_data:/data/db
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: "D3v3l0pm3nt!"
      ME_CONFIG_MONGODB_SERVER: mongodb
      TZ: Europe/Istanbul
    networks:
      - backend-network
    depends_on:
      - mongodb

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:management-latest
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "D3v3l0pm3nt!"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:latest
    container_name: my-secure-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    environment:
      TZ: Europe/Istanbul
    networks:
      - backend-network
    healthcheck:
      #test: ["CMD", "redis-cli", "-a", "D3v3l0pm3nt!", "ping"]
      test: ["CMD", "redis-cli", "-a", "$(grep ^requirepass /usr/local/etc/redis/redis.conf | awk '{print $2}')", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-insight:
    image: redis/redis-insight:latest
    container_name: redis-insight
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      TZ: Europe/Istanbul
    networks:
      - backend-network
    depends_on:
      - redis

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      TZ: Europe/Istanbul
    volumes:
      - zookeeper_data:/var/lib/zookeeper
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      TZ: Europe/Istanbul
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - backend-network
    depends_on:
      - kafka

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "admin"
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - backend-network
    depends_on:
      - mssql

volumes:
  mssql-data:
  mongo_data:
  rabbitmq_data:
  redis_data:
  zookeeper_data:
  kafka_data:
  grafana-data:

networks:
  backend-network:
    driver: bridge