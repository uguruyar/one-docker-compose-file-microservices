name: local-microservice-dev-lab-stack
services:
  # MSSQL
  mssql:
    image: mcr.microsoft.com/azure-sql-edge:latest
    container_name: mssql
    ports:
      - "1433:1433"
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "D3v3l0pm3nt!"
      MSSQL_PID: "Developer"
    volumes:
      - mssql-data:/var/opt/mssql
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P D3v3l0pm3nt! -Q 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MSSQL Exporter
  mssql-exporter:
    image: danieloliver/mssql_exporter:latest
    container_name: mssql-exporter
    platform: linux/amd64
    environment:
      - PROMETHEUS_MSSQL_DataSource=Server=mssql:1433;User ID=sa;Password=D3v3l0pm3nt!;Initial Catalog=master;Encrypt=False;TrustServerCertificate=True;
    ports:
      - "9182:9182"
    networks:
      - backend-network
    restart: unless-stopped

  # MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: "D3v3l0pm3nt!"
      TZ: Europe/Istanbul
    volumes:
      - mongo_data:/data/db
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "mongosh -u admin -p D3v3l0pm3nt! --authenticationDatabase admin --eval 'db.adminCommand({ ping: 1 })'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Postgresql
  postgres:
    image: postgres:latest
    container_name: postgres
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./initdb.d:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: "D3v3l0pm3nt!"
      POSTGRES_DB: developmentdb
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - backend-network

  # PostgreSQL Exporter
  postgres-exporter:
    image: wrouesnel/postgres_exporter:latest
    container_name: postgres-exporter
    platform: linux/amd64
    environment:
      DATA_SOURCE_NAME: "postgresql://admin:D3v3l0pm3nt!@postgres:5432/developmentdb?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - backend-network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    volumes:
      - pgadmin_working_dir:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: "D3v3l0pm3nt!"
    depends_on:
      - postgres
    ports:
      - "5433:80"
    networks:
      - backend-network
  
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    depends_on:
      - postgres
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: developmentdb
      MB_DB_PORT: 5432
      MB_DB_USER: admin
      MB_DB_PASS: "D3v3l0pm3nt!"
      MB_DB_HOST: postgres
    ports:
      - "5434:3000"
    networks:
      - backend-network

  redash-server:
    image: redash/redash:latest
    platform: linux/amd64
    container_name: redash
    depends_on:
      - postgres
      - redis
    environment:
      REDASH_DATABASE_URL: "postgresql://admin:D3v3l0pm3nt%21@postgres:5432/developmentdb"
      REDASH_REDIS_URL: "redis://redis:6379/0"
      REDASH_SECRET_KEY: mysecretkey
    ports:
      - "5000:5000"
    networks:
      - backend-network

  redash-worker:
    image: redash/redash:latest
    platform: linux/amd64
    container_name: redash_worker
    depends_on:
      - redash-server
    environment:
      REDASH_DATABASE_URL: "postgresql://admin:D3v3l0pm3nt%21@postgres:5432/developmentdb"
      REDASH_REDIS_URL: "redis://redis:6379/0"
      QUEUES: "queries,scheduled_queries,celery"
      WORKERS_COUNT: 2
    networks:
      - backend-network

  redash-scheduler:
    image: redash/redash:latest
    platform: linux/amd64
    container_name: redash_scheduler
    depends_on:
      - redash-server
    environment:
      REDASH_DATABASE_URL: "postgresql://admin:D3v3l0pm3nt%21@postgres:5432/developmentdb"
      REDASH_REDIS_URL: "redis://redis:6379/0"
      QUEUES: "scheduled_queries"
    networks:
      - backend-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "D3v3l0pm3nt!"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:latest
    container_name: my-secure-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    environment:
      TZ: Europe/Istanbul
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a D3v3l0pm3nt! ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    environment:
      REDIS_PASSWORD: "D3v3l0pm3nt!"
      REDIS_ADDR: "my-secure-redis:6379"
    ports:
      - "9121:9121"
    networks:
      - backend-network
    restart: unless-stopped

  redis-insight:
    image: redis/redisinsight:latest
    container_name: redis-insight
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      TZ: Europe/Istanbul
    networks:
      - backend-network
    depends_on:
      - redis

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      CLUSTER_ID: 0e3f5d91-xxxx-xxxx-xxxx-xxxxxxxxxxxx
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 ###PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      TZ: Europe/Istanbul
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - backend-network
    depends_on:
      - kafka

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.114.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC (apps will connect to this)
      - "4318:4318"   # OTLP HTTP
      - "55679:55679" # zPages debug
    depends_on:
      - jaeger
    networks:
      - backend-network

  # Jaeger All-in-One (Collector + Query + Agent + UI)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"   # Jaeger UI
      - "6831:6831/udp" # Agent UDP
      - "6832:6832/udp"
      - "5778:5778"
      - "14268:14268"   # Collector HTTP
      - "14250:14250"   # Collector gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - backend-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "admin"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - backend-network
    depends_on:
      - jaeger
      - mssql

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090" # Prometheus Web UI
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
      - ./prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - backend-network
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093" # Alert Manager Web UI
    volumes:
      - ./prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    networks:
      - backend-network
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100" # Node Exporter metric endpoint
    networks:
      - backend-network
    restart: unless-stopped

volumes:
  mssql-data:
  mongo_data:
  postgresql_data:
  pgadmin_working_dir:
  rabbitmq_data:
  redis_data:
  kafka_data:
  grafana-data:
  prometheus_data:
  alertmanager_data:

networks:
  backend-network:
    driver: bridge